<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 

"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.edu.nku.cc.FakeDouban.dao.MovieDao">
	<select id="getTagsByMovieId" parameterType="int" resultType="String">
		select tags.tagname from tags
			inner join movieandtags
			on tags.tagid=movieandtags.tagid
			where movieandtags.movieid=#{movieid}
	</select>
	<resultMap id="MovieRecResultMap" type="movie">

		<id property="id" jdbcType="INTEGER" column="movieid" />

		<result property="movieName" jdbcType="VARCHAR" column="moviename"/>
        <result property="movieType" jdbcType="VARCHAR" column="movietype"/>
        <result property="movieRegion" jdbcType="VARCHAR" column="movieregion"/>
        <result property="moviePrice" jdbcType="DECIMAL" column="movieprice"/>
        <result property="ranking" jdbcType="DECIMAL" column="ranking"/>
		<result property="rankCount" jdbcType="INTEGER" column="rankcount"/>
		<result property="updateYear" jdbcType="DATE" column="updateyear"/>
		<result property="reason" jdbcType="VARCHAR" column="reason"/>
		<result property="recommendType" jdbcType="INTEGER" column="recommendtype"/>
		<collection property="movieTags" column="movieid" ofType="String" select="getTagsByMovieId"/>

	</resultMap>
	<resultMap id="MovieResultMap" type="movie">
	<id property="id" jdbcType="INTEGER" column="movieid" />

		<result property="movieName" jdbcType="VARCHAR" column="moviename"/>
        <result property="movieType" jdbcType="VARCHAR" column="movietype"/>
        <result property="movieRegion" jdbcType="VARCHAR" column="movieregion"/>
        <result property="moviePrice" jdbcType="DECIMAL" column="movieprice"/>
        <result property="ranking" jdbcType="DECIMAL" column="ranking"/>
		<result property="rankCount" jdbcType="INTEGER" column="rankcount"/>
		<result property="updateYear" jdbcType="DATE" column="updateyear"/>
		
		<collection property="movieTags" column="movieid" ofType="String" select="getTagsByMovieId"/>
	</resultMap>
	<select id="findHotMovies" resultMap="MovieRecResultMap">
		select * from movie
			inner join recommendmovie
			on movie.movieid=recommendmovie.movieid
			where recommendmovie.recommendtype = 1
			<!-- 1代表热门电影-->
	</select>
	<select id="findNewMovies" resultMap="MovieRecResultMap">
		select * from movie 
			inner join recommendmovie
			on movie.movieid=recommendmovie.movieid
			where recommendmovie.recommendtype = 2
			<!--2代表新上映电影-->
	</select>
	<select id="findAll" resultMap="MovieResultMap">
		select * from Movie
	</select>
	<select id="findById" parameterType="int" resultMap="MovieResultMap">
		select * from movie where movieid=#{id}
	</select>
	<select id="findByName" parameterType="String" resultMap="MovieResultMap">
		select * from movie where moviename like #{movieName}
	</select>
	<select id="findByAbsoluteName" parameterType="String" resultMap="MovieResultMap">
		select * from movie where moviename like #{movieName}
	</select>
	<select id="findRecById" parameterType="int" resultMap="MovieRecResultMap">
		select * from movie
			inner join recommendmovie
			on movie.movieid=recommendmovie.movieid
			where movie.movieid=#{id}
	</select>
	
	<insert id="insertmovie" parameterType="movie"  useGeneratedKeys="true" keyProperty="movieid">
		insert into 
			movie(moviename,movietype,movieregion,movieprice,ranking,rankcount,updatedate)
			values(#{movieName},#{movieType},#{movieRegion},#{moviePrice},#{ranking},#{rankCount},#{updateDate})
	</insert>
	
	<insert id="insertrecmovie" parameterType="movie">
		insert into recommendmovie values(#{id},#{reason},#{recommendType})
	</insert>
	
	<delete id="deleterecmovie" parameterType="int">
		delete from recommendmovie where movieid=#{id}
	</delete>
	
	<insert id="insertmovietag" parameterType="movietag">
		insert into movieandtags(movieid,tagid) values(#{movieid},#{tagid})
	</insert>
	<update id="modifyMovie" parameterType="movie" >
		update movie set moviename=#{movieName},movieType=#{movieType},
			movieregion=#{movieRegion},movieprice=#{moviePrice},ranking=#{ranking},
			rankcount=#{rankCount},updatedate=#{updateDate}
			where movieid=#{id}
	</update>
	
</mapper>